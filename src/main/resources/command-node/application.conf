akka {

  http.server {
    preview.enable-http2 = on
    idle-timeout = infinite
  }

  actor {
      provider = cluster
      allow-java-serialization = on
      serializers {
        jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
      }
      serialization-bindings {
        "ru.otus.sc.command.entity.CborSerializable" = jackson-cbor
        "akka.persistence.SnapshotProtocol$LoadSnapshot" = jackson-cbor
      }
    }

    # For the sample, just bind to loopback and do not allow access from the network
      # the port is overridden by the logic in main class
    remote.artery {
        canonical.port = 0
        canonical.hostname = 127.0.0.1
    }

  cluster {
    seed-nodes = [
      "akka://Accounting@127.0.0.1:2081",
      "akka://Accounting@127.0.0.1:2082",
      "akka://Accounting@127.0.0.1:2083"
    ]
    roles = ["management", "write-model", "read-model"]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    sharding {
      number-of-shards = 10
      passivate-idle-entity-after = 60s
      role = "write-model"
    }
  }

  persistence {

      query.journal.leveldb.write-plugin = "akka.persistence.journal.leveldb"

      journal {
        plugin = "akka.persistence.journal.proxy"
        proxy {
            target-journal-plugin = "akka.persistence.journal.leveldb"
        }
      }
      snapshot-store {
        plugin = "akka.persistence.snapshot-store.proxy"
        proxy.target-snapshot-store-plugin = "akka.persistence.snapshot-store.local"
        local.dir = "target/snapshot"
      }
    }
    extensions = ["akka.persistence.journal.PersistencePluginProxyExtension"]
}

accounting.http.port = 0